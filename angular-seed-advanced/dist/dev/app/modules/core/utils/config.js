"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Config = (function () {
    function Config() {
    }
    Config.IS_WEB = function () {
        return Config.PLATFORM_TARGET === Config.PLATFORMS.WEB;
    };
    Config.IS_MOBILE_NATIVE = function () {
        return Config.PLATFORM_TARGET === Config.PLATFORMS.MOBILE_NATIVE;
    };
    Config.IS_MOBILE_HYBRID = function () {
        return Config.PLATFORM_TARGET === Config.PLATFORMS.MOBILE_HYBRID;
    };
    Config.IS_DESKTOP = function () {
        return Config.PLATFORM_TARGET === Config.PLATFORMS.DESKTOP;
    };
    Config.ENVIRONMENT = function () {
        try {
            return JSON.parse('{"API":"https://demo.com","ENV":"DEV"}');
        }
        catch (exp) {
            return {};
        }
    };
    Config.GET_SUPPORTED_LANGUAGES = function () {
        return [
            { code: 'en', title: 'English' },
            { code: 'es', title: 'Spanish' },
            { code: 'fr', title: 'French' },
            { code: 'ru', title: 'Russian' },
            { code: 'bg', title: 'Bulgarian' }
        ];
    };
    Config.IS_DEBUG_MODE = function () {
        for (var key in Config.DEBUG) {
            if (Config.DEBUG[key]) {
                return true;
            }
        }
        return false;
    };
    Config.RESET = function () {
        for (var key in Config.DEBUG) {
            Config.DEBUG[key] = false;
        }
    };
    return Config;
}());
Config.DEBUG = {
    LEVEL_1: false,
    LEVEL_2: false,
    LEVEL_3: false,
    LEVEL_4: false
};
Config.PLATFORMS = {
    WEB: 'web',
    MOBILE_NATIVE: 'mobile_native',
    MOBILE_HYBRID: 'mobile_hybrid',
    DESKTOP: 'desktop'
};
Config.PLATFORM_TARGET = Config.PLATFORMS.WEB;
exports.Config = Config;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC9tb2R1bGVzL2NvcmUvdXRpbHMvY29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBY0E7SUFBQTtJQTJFQSxDQUFDO0lBbkRlLGFBQU0sR0FBcEI7UUFDRSxNQUFNLENBQUMsTUFBTSxDQUFDLGVBQWUsS0FBSyxNQUFNLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQztJQUN6RCxDQUFDO0lBRWEsdUJBQWdCLEdBQTlCO1FBQ0UsTUFBTSxDQUFDLE1BQU0sQ0FBQyxlQUFlLEtBQUssTUFBTSxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUM7SUFDbkUsQ0FBQztJQUVhLHVCQUFnQixHQUE5QjtRQUNFLE1BQU0sQ0FBQyxNQUFNLENBQUMsZUFBZSxLQUFLLE1BQU0sQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDO0lBQ25FLENBQUM7SUFFYSxpQkFBVSxHQUF4QjtRQUNFLE1BQU0sQ0FBQyxNQUFNLENBQUMsZUFBZSxLQUFLLE1BQU0sQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDO0lBQzdELENBQUM7SUFFYSxrQkFBVyxHQUF6QjtRQUNFLElBQUksQ0FBQztZQUNILE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLG1CQUFtQixDQUFDLENBQUM7UUFDekMsQ0FBQztRQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDYixNQUFNLENBQUMsRUFBRSxDQUFDO1FBQ1osQ0FBQztJQUNILENBQUM7SUFHYSw4QkFBdUIsR0FBckM7UUFDRSxNQUFNLENBQUM7WUFDTCxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRTtZQUNoQyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRTtZQUNoQyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRTtZQUMvQixFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRTtZQUNoQyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRTtTQUNuQyxDQUFDO0lBQ0osQ0FBQztJQUVhLG9CQUFhLEdBQTNCO1FBQ0UsR0FBRyxDQUFDLENBQUMsSUFBSSxHQUFHLElBQUksTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDN0IsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBRXRCLE1BQU0sQ0FBQyxJQUFJLENBQUM7WUFDZCxDQUFDO1FBQ0gsQ0FBQztRQUNELE1BQU0sQ0FBQyxLQUFLLENBQUM7SUFDZixDQUFDO0lBR2EsWUFBSyxHQUFuQjtRQUNFLEdBQUcsQ0FBQyxDQUFDLElBQUksR0FBRyxJQUFJLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQzdCLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDO1FBQzVCLENBQUM7SUFDSCxDQUFDO0lBQ0gsYUFBQztBQUFELENBM0VBLEFBMkVDO0FBdEVlLFlBQUssR0FBRztJQUNwQixPQUFPLEVBQUUsS0FBSztJQUNkLE9BQU8sRUFBRSxLQUFLO0lBQ2QsT0FBTyxFQUFFLEtBQUs7SUFDZCxPQUFPLEVBQUUsS0FBSztDQUNmLENBQUM7QUFHWSxnQkFBUyxHQUFlO0lBQ3BDLEdBQUcsRUFBRSxLQUFLO0lBQ1YsYUFBYSxFQUFFLGVBQWU7SUFDOUIsYUFBYSxFQUFFLGVBQWU7SUFDOUIsT0FBTyxFQUFFLFNBQVM7Q0FDbkIsQ0FBQztBQUdZLHNCQUFlLEdBQVcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUM7QUFyQmxELHdCQUFNIiwiZmlsZSI6ImFwcC9tb2R1bGVzL2NvcmUvdXRpbHMvY29uZmlnLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gRmVlbCBmcmVlIHRvIGV4dGVuZCB0aGlzIGludGVyZmFjZVxuLy8gZGVwZW5kaW5nIG9uIHlvdXIgYXBwIHNwZWNpZmljIGNvbmZpZy5cbmV4cG9ydCBpbnRlcmZhY2UgRW52Q29uZmlnIHtcbiAgQVBJPzogc3RyaW5nO1xuICBFTlY/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVBsYXRmb3JtcyB7XG4gIFdFQjogc3RyaW5nO1xuICBNT0JJTEVfTkFUSVZFOiBzdHJpbmc7XG4gIE1PQklMRV9IWUJSSUQ6IHN0cmluZztcbiAgREVTS1RPUDogc3RyaW5nO1xufVxuXG5leHBvcnQgY2xhc3MgQ29uZmlnIHtcblxuICBwdWJsaWMgc3RhdGljIFBhZ2VDbGFzczogYW55O1xuXG5cbiAgcHVibGljIHN0YXRpYyBERUJVRyA9IHtcbiAgICBMRVZFTF8xOiBmYWxzZSwgLy8gLmluZm8gb25seVxuICAgIExFVkVMXzI6IGZhbHNlLCAvLyAud2FybiBvbmx5XG4gICAgTEVWRUxfMzogZmFsc2UsIC8vIC5lcnJvciBvbmx5XG4gICAgTEVWRUxfNDogZmFsc2UgIC8vIC5sb2cgKyBhbGwgdGhlIGFib3ZlXG4gIH07XG5cbiAgLy8gc3VwcG9ydGVkIHBsYXRmb3Jtc1xuICBwdWJsaWMgc3RhdGljIFBMQVRGT1JNUzogSVBsYXRmb3JtcyA9IHtcbiAgICBXRUI6ICd3ZWInLFxuICAgIE1PQklMRV9OQVRJVkU6ICdtb2JpbGVfbmF0aXZlJyxcbiAgICBNT0JJTEVfSFlCUklEOiAnbW9iaWxlX2h5YnJpZCcsXG4gICAgREVTS1RPUDogJ2Rlc2t0b3AnXG4gIH07XG5cbiAgLy8gY3VycmVudCB0YXJnZXQgKGRlZmF1bHRzIHRvIHdlYilcbiAgcHVibGljIHN0YXRpYyBQTEFURk9STV9UQVJHRVQ6IHN0cmluZyA9IENvbmZpZy5QTEFURk9STVMuV0VCO1xuXG4gIC8vIGNvbnZlbmllbnQgcGxhdGZvcm0gY2hlY2tzXG4gIHB1YmxpYyBzdGF0aWMgSVNfV0VCKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBDb25maWcuUExBVEZPUk1fVEFSR0VUID09PSBDb25maWcuUExBVEZPUk1TLldFQjtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgSVNfTU9CSUxFX05BVElWRSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gQ29uZmlnLlBMQVRGT1JNX1RBUkdFVCA9PT0gQ29uZmlnLlBMQVRGT1JNUy5NT0JJTEVfTkFUSVZFO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBJU19NT0JJTEVfSFlCUklEKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBDb25maWcuUExBVEZPUk1fVEFSR0VUID09PSBDb25maWcuUExBVEZPUk1TLk1PQklMRV9IWUJSSUQ7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIElTX0RFU0tUT1AoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIENvbmZpZy5QTEFURk9STV9UQVJHRVQgPT09IENvbmZpZy5QTEFURk9STVMuREVTS1RPUDtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgRU5WSVJPTk1FTlQoKTogRW52Q29uZmlnIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIEpTT04ucGFyc2UoJzwlPSBFTlZfQ09ORklHICU+Jyk7XG4gICAgfSBjYXRjaCAoZXhwKSB7XG4gICAgICByZXR1cm4ge307XG4gICAgfVxuICB9XG5cbiAgLy8gc3VwcG9ydGVkIGxhbmd1YWdlc1xuICBwdWJsaWMgc3RhdGljIEdFVF9TVVBQT1JURURfTEFOR1VBR0VTKCkge1xuICAgIHJldHVybiBbXG4gICAgICB7IGNvZGU6ICdlbicsIHRpdGxlOiAnRW5nbGlzaCcgfSxcbiAgICAgIHsgY29kZTogJ2VzJywgdGl0bGU6ICdTcGFuaXNoJyB9LFxuICAgICAgeyBjb2RlOiAnZnInLCB0aXRsZTogJ0ZyZW5jaCcgfSxcbiAgICAgIHsgY29kZTogJ3J1JywgdGl0bGU6ICdSdXNzaWFuJyB9LFxuICAgICAgeyBjb2RlOiAnYmcnLCB0aXRsZTogJ0J1bGdhcmlhbicgfVxuICAgIF07XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIElTX0RFQlVHX01PREUoKTogYm9vbGVhbiB7XG4gICAgZm9yIChsZXQga2V5IGluIENvbmZpZy5ERUJVRykge1xuICAgICAgaWYgKENvbmZpZy5ERUJVR1trZXldKSB7XG4gICAgICAgIC8vIGlmIGFueSBsZXZlbCBpcyBvbiwgZGVidWcgbW9kZSBpcyBvblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLy8gcmVzZXQgZGVidWcgZGVmYXVsdHNcbiAgcHVibGljIHN0YXRpYyBSRVNFVCgpIHtcbiAgICBmb3IgKGxldCBrZXkgaW4gQ29uZmlnLkRFQlVHKSB7XG4gICAgICBDb25maWcuREVCVUdba2V5XSA9IGZhbHNlO1xuICAgIH1cbiAgfVxufVxuIl19
